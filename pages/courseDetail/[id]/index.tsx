import {
  GetStaticProps,
  GetStaticPaths,
  InferGetStaticPropsType,
  NextPage,
} from "next";
import { useRouter } from "next/router";
import MobileLayout from "../../../components/MobileLayout";
import courseData from "./course.json";
import styles from "../../../styles/coursedetail.module.scss";
import { MainText, Title1 } from "../../../components/utils";
import Image from "next/image";
import Head from "next/head";
import { useEffect, useState } from "react";
import MobileCard from "../../../components/MobileCard";
interface categray {
  gysjsh: string;
  jcsj: string;
  rjgcx: string;
  yxkzyjh: string;
  sjtx: string;
}
const courses: categray = {
  gysjsh: "工业设计手绘",
  jcsj: "基础设计",
  rjgcx: "人机工程学",
  yxkzyjh: "原型控制与交互",
  sjtx: "设计图学",
};
const CourseDetail: NextPage = ({
  feature,
  intro,
  imageUrl,
  titleImageUrl,
}: InferGetStaticPropsType<typeof getStaticProps>) => {
  const route = useRouter();
  const [img, setImage] = useState();
  const [k, setK] = useState<string>("");
  const key = route.query.id as keyof categray;
  useEffect(() => {
    setK(courses[key]);
    console.log();
    // setImage();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [route]);
  return (
    <div>
      <Head>
        <title>{k}｜浙江理工大学工业设计系</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <MobileLayout>
        <div className={styles.container}>
          <div className={styles.top}>
            <div className={styles.bgimage}>
              <Image
                src={require(`/public/${imageUrl}`)}
                alt="carbg"
                layout="fill"
                objectFit="cover"
              ></Image>
            </div>
            <div className={styles.titleImg}>
              <Image
                src={require(`/public/${titleImageUrl}`)}
                alt="title"
              ></Image>
            </div>
          </div>
          <div className={styles.content}>
            <div style={{ marginBottom: 20, marginTop: 30 }}>
              <Title1>课程介绍</Title1>
              <Title1>Course Introduction</Title1>
            </div>
            {intro.split("\n").map((index: number, value: string) => (
              <MainText key={value}>{index}</MainText>
            ))}
            <div style={{ marginBottom: 20, marginTop: 30 }}>
              <Title1>课程特点</Title1>
              <Title1>Course Features</Title1>
            </div>
            {feature.split("\n").map((index: number, value: string) => (
              <MainText key={value}>{index}</MainText>
            ))}
            <div style={{ marginBottom: 20, marginTop: 30 }}>
              <Title1>课程作品</Title1>
              <Title1>Course Works</Title1>
            </div>
            <div className={styles.cardList}>
              <MobileCard
                imageUrl={require("/public/img/test.jpg")}
                title={"示例标题"}
                author={"示例标题"}
              ></MobileCard>
              <MobileCard
                imageUrl={require("/public/img/test.jpg")}
                title={"示例标题"}
                author={"示例标题"}
              ></MobileCard>
              <MobileCard
                imageUrl={require("/public/img/test.jpg")}
                title={"示例标题"}
                author={"示例标题"}
              ></MobileCard>
              <MobileCard
                imageUrl={require("/public/img/test.jpg")}
                title={"示例标题"}
                author={"示例标题"}
              ></MobileCard>
            </div>
          </div>
        </div>
      </MobileLayout>
    </div>
  );
};

interface cd {
  gysjsh: {};
  jcsj: {};
  sjtx: {};
  yxkzyjh: {};
  rjgcx: {};
}
export const getStaticProps: GetStaticProps = async context => {
  const key = context.params?.id as keyof cd;
  const feature = courseData[key].feature;
  const intro = courseData[key].intro;
  const imageUrl = courseData[key].imageUrl;
  const titleImageUrl = courseData[key].titleImageUrl;
  return {
    props: {
      feature: feature,
      intro: intro,
      imageUrl: imageUrl,
      titleImageUrl: titleImageUrl,
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const paths = Object.keys(courseData).map(id => ({
    params: {
      id: id.toString(),
    },
  }));
  return {
    paths: paths,
    fallback: true,
  };
};

export default CourseDetail;
